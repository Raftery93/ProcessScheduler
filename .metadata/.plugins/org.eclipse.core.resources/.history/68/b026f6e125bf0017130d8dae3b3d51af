package ie.gmit.os;

import java.util.*;

public class ProcessRunner {

	public static void main(String args[]) {

		int num_processes;
		int i = 0, option = 0;
		;
		int burstTime = 0;
		int quantum = 0;
		String name = null;

		Scanner in = new Scanner(System.in);

		System.out.println(
				"Please select which scheduling algorithm you want to use: \n1) Shortest Job First \n2) First Come First Serve \n3) Round Robin");
		option = in.nextInt();

		System.out.println("Please enter the number of processes:");
		num_processes = in.nextInt();

		process[] myProcesses = new process[num_processes];

		for (i = 0; i < myProcesses.length; i++) {

			System.out.println("Please enter the burst time of process " + (i + 1) + ":");
			burstTime = in.nextInt();

			System.out.println("Please enter the name of process " + (i + 1) + ":");
			name = in.next();

			myProcesses[i] = new process(burstTime, name);

		}


		if (option == 1) {
			
			Arrays.sort(myProcesses);
			for (i = 0; i < myProcesses.length; i++) {
				myProcesses[i].display();
			}
			
			System.out.println("Average wait time(SJF):");
			averageWaitTimeSjf(myProcesses, num_processes);
			
		} else if (option == 2) {
			
			for (i = 0; i < myProcesses.length; i++) {
				myProcesses[i].display();
			}
			
			averageWaitTimeFcfs(myProcesses, num_processes);
			
		} else if (option == 3) {
			System.out.println("Please enter a quantum: ");
			quantum = in.nextInt();

			averageWaitTimeRr(myProcesses, num_processes, quantum);
		} else {
			System.out.println("Please enter a valid option");
		}
	}// main

	public static void averageWaitTimeRr(process[] list, int size, int quantum) {

		int i = 0;
		int remaining = 0;
		int totalRemaining = 0;
		
		for(int j = 0; j < size; j++){
			totalRemaining += list[j].getBurstTime();
		}
		
		while (totalRemaining > 0) {


			list[i].burstTime = list[i].burstTime - quantum;
				
				//list[i].burstTime = remaining;
			
				if(list[i].burstTime < 0){
					list[i].burstTime = 0;
				}
			
			
			i++;
		}

	}

	public static void averageWaitTimeFcfs(process[] list, int size) {
		double total = 0;

		for (int j = 0; j < size; j++) {

			// System.out.println("Total: " + total);
			if (j == 0) {
				total = list[j].getBurstTime();
			} else if (size - 1 > j && j >= 1) {
				total = list[j].getBurstTime() + list[j - 1].getBurstTime() + total;

			}
		}

		System.out.println("Average wait time: " + total / size);

	}

	public static void averageWaitTimeSjf(process[] list, int size) {

		int waitTime = 0;
		double totalWaitTime = 0;

		// set wait time for each process to the burst time of the previous
		// process
		for (int i = 0; i < size; i++) {
			list[i].setWaitTime(waitTime);
			waitTime += list[i].getBurstTime();
			System.out.println(list[i]);
			
			totalWaitTime += waitTime;
			
		}

		// sum of wait times of all processes
		

		// average wait time for the system
		System.out.println(totalWaitTime / size);
		totalWaitTime / processes.size();

	}
}
